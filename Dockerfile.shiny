# Optimized Dockerfile for Shiny app updater container
# Multi-stage build for minimal image size

# Build arguments for flexibility
ARG R_VERSION=4.3.1
ARG NCPUS=4
ARG BUILD_DATE

# Build stage - install all packages and dependencies
FROM rocker/r-ver:${R_VERSION} AS builder

# Install system dependencies required for R packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    libcurl4-openssl-dev \
    libssl-dev \
    libxml2-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy package files first for better caching
COPY renv.lock* ./
COPY packagelist.txt ./

# Configure R to use binary packages from RStudio Package Manager
RUN R -e "options(repos = c(RSPM = 'https://packagemanager.rstudio.com/all/latest', CRAN = 'https://cran.r-project.org'))"

# Install renv first with cache mount
RUN --mount=type=cache,target=/root/.cache/R/renv \
    R -e "install.packages('renv')"

# Install packages with cache mount - prefer renv.lock if it exists
RUN --mount=type=cache,target=/root/.cache/R/renv \
    --mount=type=cache,target=/usr/local/lib/R/site-library \
    if [ -f "renv.lock" ]; then \
        R -e "renv::restore()"; \
    else \
        Rscript -e "packages <- readLines('packagelist.txt'); \
        packages <- packages[!grepl('^#', packages) & nchar(trimws(packages)) > 0]; \
        packages <- trimws(packages); \
        install.packages(packages[!packages %in% installed.packages()[,'Package']], \
                         Ncpus=${NCPUS})"; \
    fi

# Runtime stage - minimal image with only what's needed
FROM rocker/r-ver:${R_VERSION}

# Metadata labels
LABEL org.opencontainers.image.title="League Simulator - Shiny Updater" \
      org.opencontainers.image.description="Automated Shiny app deployment for football league simulations" \
      org.opencontainers.image.source="https://github.com/chrisschwer/league-simulator" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.version="${R_VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}"

# Install only runtime system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libcurl4 \
    libxml2 \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set timezone
ENV TZ=Europe/Berlin
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create non-root user
RUN useradd -m -u 1000 -s /bin/bash appuser

# Copy installed R packages from builder
COPY --from=builder /usr/local/lib/R/site-library /usr/local/lib/R/site-library

# Copy application files with correct ownership
COPY --chown=appuser:appuser ShinyApp/ /ShinyApp/
COPY --chown=appuser:appuser RCode/ /RCode/

# Create data directories
RUN mkdir -p /ShinyApp/data /RCode/league_results && \
    chown -R appuser:appuser /ShinyApp/data /RCode/league_results

# Copy health check script
COPY docker/healthcheck-shiny.R /usr/local/bin/healthcheck.R
RUN chmod +x /usr/local/bin/healthcheck.R

# Create startup script that runs shiny_scheduler.R
RUN echo '#!/usr/bin/env Rscript\n\
source("/RCode/shiny_scheduler.R")\n\
\n\
# Get environment variables\n\
update_interval <- as.numeric(Sys.getenv("UPDATE_INTERVAL", "300"))\n\
\n\
# Run the Shiny scheduler\n\
shiny_scheduler(update_interval = update_interval,\n\
               results_dir = "/RCode/league_results/")\n' > /RCode/run_shiny_updater.R && \
chown appuser:appuser /RCode/run_shiny_updater.R && \
chmod +x /RCode/run_shiny_updater.R

# Switch to non-root user
USER appuser
WORKDIR /RCode

# Volume for reading results (shared with league updaters)
VOLUME ["/RCode/league_results"]

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=45s --retries=3 \
  CMD ["/usr/local/bin/healthcheck.R"]

# Environment variables documentation:
# Required: SHINYAPPS_IO_SECRET
# Optional: UPDATE_INTERVAL (default: 300 seconds)

CMD ["Rscript", "/RCode/run_shiny_updater.R"]