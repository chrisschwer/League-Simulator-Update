name: R Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        r-version: ['4.3.1', '4.4.0']
        include:
          # Add one macOS test with latest R for platform coverage
          - os: macos-latest
            r-version: '4.4.0'

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up R ${{ matrix.r-version }}
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ matrix.r-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev r-base-dev
        
    - name: Cache R packages
      uses: actions/cache@v4
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-r-${{ matrix.r-version }}-${{ hashFiles('**/packagelist.txt', '**/test_packagelist.txt') }}
        restore-keys: |
          ${{ runner.os }}-r-${{ matrix.r-version }}-
          
    - name: Cache test results
      uses: actions/cache@v4
      with:
        path: tests/testthat/_test_cache
        key: ${{ runner.os }}-r-${{ matrix.r-version }}-tests-${{ hashFiles('tests/testthat/test-*.R', 'RCode/*.R') }}
        restore-keys: |
          ${{ runner.os }}-r-${{ matrix.r-version }}-tests-
          
    - name: Cache compiled C++ objects
      uses: actions/cache@v4
      with:
        path: |
          RCode/*.o
          RCode/*.so
          RCode/*.dll
        key: ${{ runner.os }}-r-${{ matrix.r-version }}-cpp-${{ hashFiles('RCode/*.cpp') }}
        restore-keys: |
          ${{ runner.os }}-r-${{ matrix.r-version }}-cpp-
          
    - name: Install production dependencies
      run: |
        packages <- readLines("packagelist.txt")
        packages <- packages[!grepl("^#", packages) & nchar(trimws(packages)) > 0]
        packages <- trimws(packages)
        install.packages(packages, repos = "https://cloud.r-project.org")
      shell: Rscript {0}
      
    - name: Install test dependencies
      run: |
        packages <- readLines("test_packagelist.txt")
        packages <- packages[!grepl("^#", packages) & nchar(trimws(packages)) > 0]
        packages <- trimws(packages)
        install.packages(packages, repos = "https://cloud.r-project.org")
      shell: Rscript {0}
      
    - name: Compile C++ code with retry
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 5
        max_attempts: 3
        command: |
          Rscript -e "library(Rcpp); sourceCpp('RCode/SpielNichtSimulieren.cpp')"
      
    - name: Run tests
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY || 'test_key_for_ci' }}
        CI_ENVIRONMENT: 'true'
        RUN_DEPLOYMENT_TESTS_ONLY: 'true'
        TEST_TIMEOUT: '300'  # 5 minute timeout for individual tests
      timeout-minutes: 30  # Increased to 30 minutes for complex test scenarios
      run: |
        # Set working directory to project root
        setwd("${{ github.workspace }}")
        
        # The helper-test-setup.R file will handle all sourcing
        library(testthat)
        
        cat("Starting test run...\n")
        cat("API Key available:", if(nchar(Sys.getenv("RAPIDAPI_KEY")) > 0) "Yes" else "No", "\n")
        cat("CI Environment:", Sys.getenv("CI_ENVIRONMENT"), "\n")
        
        # Run tests with better error handling and reporting
        # For CI, skip non-deployment tests
        if (Sys.getenv("RUN_DEPLOYMENT_TESTS_ONLY") == "true") {
          cat("Running deployment tests only (skipping season transition, etc.)\n")
          
          # Define test files to skip in CI (non-deployment tests)
          skip_patterns <- c(
            "test-season-transition",
            "test-season-processor", 
            "test-season-validation",
            "test-interactive-prompts",
            "test-input-handler",
            "test-csv-generation",
            "test-team-count",
            "test-multi-season",
            "test-cli-arguments",
            "test-configmap",
            "test-elo-aggregation",
            "test-second-team"
          )
          
          # Create custom filter for test files
          test_filter <- function(path) {
            !any(sapply(skip_patterns, function(p) grepl(p, path)))
          }
          
          # Run tests (filtering will be handled by helper-test-setup.R)
          test_results <- tryCatch({
            # Use ListReporter for better results parsing
            test_dir("tests/testthat", 
                    reporter = ListReporter$new())
          }, error = function(e) {
            cat("Error during test execution:", conditionMessage(e), "\n")
            return(NULL)
          })
        } else {
          # Run all tests
          test_results <- tryCatch({
            test_dir("tests/testthat", reporter = ListReporter$new())
          }, error = function(e) {
            cat("Error during test execution:", conditionMessage(e), "\n")
            return(NULL)
          })
        }
        
        # Check test results
        if (is.null(test_results)) {
          cat("\nERROR TYPE: Infrastructure\n")
          cat("Test execution framework failed - this is likely a CI infrastructure issue\n")
          stop("Test execution failed")
        }
        
        # Calculate results from ListReporter
        total_tests <- 0
        failed_tests <- 0
        skipped_tests <- 0
        
        if (!is.null(test_results)) {
          # ListReporter stores results in its fields
          results <- test_results$results
          
          for (result in results) {
            total_tests <- total_tests + 1
            if (!is.null(result$error) || !is.null(result$failure)) {
              failed_tests <- failed_tests + 1
            } else if (!is.null(result$skip)) {
              skipped_tests <- skipped_tests + 1
            }
          }
        }
        
        cat("\nTest Summary:\n")
        cat("Total tests: ", total_tests, "\n")
        cat("Passed: ", total_tests - failed_tests - skipped_tests, "\n")
        cat("Failed: ", failed_tests, "\n")
        cat("Skipped: ", skipped_tests, "\n")
        
        # For CI, we'll tolerate some failures while fixing them
        # Once all tests pass, change this threshold to 0
        max_allowed_failures <- 20  # Reduced threshold as tests are being fixed
        
        if (failed_tests > max_allowed_failures) {
          cat("\nERROR TYPE: Code\n")
          cat("Test failures indicate code issues that need to be fixed\n")
          stop(paste("Too many test failures:", failed_tests, "exceeded threshold of", max_allowed_failures))
        } else if (failed_tests > 0) {
          cat("\nWARNING:", failed_tests, "tests failed (threshold:", max_allowed_failures, ")\n")
          cat("This is temporarily allowed while tests are being fixed.\n")
          cat("ERROR TYPE: Code (non-blocking)\n")
        } else {
          cat("\nAll tests passed!\n")
        }
        
        # Generate test summary
        source(".github/scripts/test-summary.R")
      shell: Rscript {0}
      
    - name: Run performance tests (Ubuntu latest R only)
      if: matrix.os == 'ubuntu-latest' && matrix.r-version == '4.4.0'
      env:
        RUN_PERFORMANCE_TESTS: true
      run: |
        library(testthat)
        test_file("tests/testthat/test-performance-scaling.R")
        test_file("tests/testthat/test-performance-matrix.R")
      shell: Rscript {0}
      
    - name: Generate coverage report (Ubuntu latest R only)
      if: matrix.os == 'ubuntu-latest' && matrix.r-version == '4.4.0'
      continue-on-error: true  # Don't fail the build if coverage fails
      run: |
        tryCatch({
          library(covr)
          
          # Get R source files
          r_files <- list.files("RCode", pattern = "\\.R$", full.names = TRUE)
          r_files <- r_files[!grepl("(test|Test)", r_files)]
          
          # Get test files
          test_files <- list.files("tests/testthat", pattern = "^test.*\\.R$", full.names = TRUE)
          
          cat("Running coverage analysis...\n")
          cat("Source files:", length(r_files), "\n")
          cat("Test files:", length(test_files), "\n")
          
          # Run coverage with package approach instead of file approach
          # This handles Rcpp code better
          cov <- covr::package_coverage(
            path = ".",
            type = "tests",
            quiet = FALSE
          )
          
          print(cov)
          
          # Save coverage report
          coverage_pct <- percent_coverage(cov)
          cat(sprintf("\nOverall Coverage: %.1f%%\n", coverage_pct))
          
          # For now, just report coverage without failing
          # Once tests are fixed, we can enforce minimum coverage
          if (coverage_pct < 60) {
            cat("WARNING: Coverage is below 60% threshold\n")
          } else {
            cat("Coverage meets minimum threshold\n")
          }
        }, error = function(e) {
          cat("Coverage analysis failed:", conditionMessage(e), "\n")
          cat("This is not critical - continuing build\n")
        })
      shell: Rscript {0}
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.r-version == '4.4.0'
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.4.0'
        
    - name: Install lintr
      run: |
        install.packages("lintr", repos = "https://cloud.r-project.org")
      shell: Rscript {0}
      
    - name: Run linter
      run: |
        library(lintr)
        lints <- lint_dir("RCode")
        if (length(lints) > 0) {
          print(lints)
          warning("Linting issues found")
        }
      shell: Rscript {0}