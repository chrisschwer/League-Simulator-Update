name: R Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        r-version: ['4.2.0', '4.3.0', '4.4.0']
        exclude:
          # Reduce matrix size - only test latest R on macOS
          - os: macos-latest
            r-version: '4.2.0'
          - os: macos-latest
            r-version: '4.3.0'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up R ${{ matrix.r-version }}
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ matrix.r-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev r-base-dev
        
    - name: Cache R packages
      uses: actions/cache@v3
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-r-${{ matrix.r-version }}-${{ hashFiles('**/packagelist.txt', '**/test_packagelist.txt') }}
        restore-keys: |
          ${{ runner.os }}-r-${{ matrix.r-version }}-
          
    - name: Install production dependencies
      run: |
        packages <- readLines("packagelist.txt")
        packages <- packages[!grepl("^#", packages) & nchar(trimws(packages)) > 0]
        packages <- trimws(packages)
        install.packages(packages, repos = "https://cloud.r-project.org")
      shell: Rscript {0}
      
    - name: Install test dependencies
      run: |
        packages <- readLines("test_packagelist.txt")
        packages <- packages[!grepl("^#", packages) & nchar(trimws(packages)) > 0]
        packages <- trimws(packages)
        install.packages(packages, repos = "https://cloud.r-project.org")
      shell: Rscript {0}
      
    - name: Compile C++ code
      run: |
        library(Rcpp)
        sourceCpp("RCode/SpielNichtSimulieren.cpp")
      shell: Rscript {0}
      
    - name: Run tests
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY || 'test_key_for_ci' }}
      run: |
        # Set working directory to project root
        setwd("${{ github.workspace }}")
        
        # Source required R files from RCode directory
        r_files <- list.files("RCode", pattern = "\\.R$", full.names = TRUE)
        r_files <- r_files[!grepl("(test|Test)", r_files)]  # Exclude test files
        
        # Source files with error handling
        for (file in r_files) {
          tryCatch(
            source(file),
            error = function(e) {
              cat("Warning: Could not source", file, ":", conditionMessage(e), "\n")
            }
          )
        }
        
        # Now run tests
        library(testthat)
        test_results <- test_dir("tests/testthat", reporter = "summary")
        
        # Check if any tests failed
        if (length(test_results) > 0) {
          failed_tests <- sum(sapply(test_results, function(x) {
            if (is.list(x) && "failed" %in% names(x)) x$failed else 0
          }))
          if (failed_tests > 0) {
            stop(paste("Tests failed:", failed_tests, "failures"))
          }
        }
      shell: Rscript {0}
      
    - name: Run performance tests (Ubuntu latest R only)
      if: matrix.os == 'ubuntu-latest' && matrix.r-version == '4.4.0'
      env:
        RUN_PERFORMANCE_TESTS: true
      run: |
        library(testthat)
        test_file("tests/testthat/test-performance-scaling.R")
        test_file("tests/testthat/test-performance-matrix.R")
      shell: Rscript {0}
      
    - name: Generate coverage report (Ubuntu latest R only)
      if: matrix.os == 'ubuntu-latest' && matrix.r-version == '4.4.0'
      run: |
        library(covr)
        # Run coverage on R code only, excluding compiled code
        cov <- covr::file_coverage(
          source_files = list.files("RCode", pattern = "\\.R$", full.names = TRUE),
          test_files = list.files("tests/testthat", pattern = "^test.*\\.R$", full.names = TRUE)
        )
        print(cov)
        
        # Save coverage report
        coverage_pct <- percent_coverage(cov)
        cat(sprintf("Coverage: %.1f%%\n", coverage_pct))
        
        # Fail if coverage is too low
        if (coverage_pct < 60) {
          stop("Coverage too low (< 60%)")
        }
      shell: Rscript {0}
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.r-version == '4.4.0'
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.4.0'
        
    - name: Install lintr
      run: |
        install.packages("lintr", repos = "https://cloud.r-project.org")
      shell: Rscript {0}
      
    - name: Run linter
      run: |
        library(lintr)
        lints <- lint_dir("RCode")
        if (length(lints) > 0) {
          print(lints)
          warning("Linting issues found")
        }
      shell: Rscript {0}