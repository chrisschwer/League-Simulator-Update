name: Automated Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code-review:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Setup Review Tools
      run: |
        echo "🔍 Automated code review starting..."
    
    - name: Check PR Size
      id: pr-size
      run: |
        ADDITIONS=$(gh pr view ${{ github.event.pull_request.number }} --json additions -q '.additions')
        DELETIONS=$(gh pr view ${{ github.event.pull_request.number }} --json deletions -q '.deletions')
        TOTAL=$((ADDITIONS + DELETIONS))
        
        echo "📊 PR Size: +$ADDITIONS -$DELETIONS (Total: $TOTAL)"
        
        if [ $TOTAL -gt 500 ]; then
          echo "⚠️  Large PR detected. Consider breaking into smaller PRs."
        fi
      env:
        GH_TOKEN: ${{ github.token }}
    
    - name: Run Linting Checks
      continue-on-error: true
      run: |
        echo "### 🎨 Code Style Check" >> review.md
        echo "" >> review.md
        
        # Install R and lintr
        sudo apt-get update
        sudo apt-get install -y r-base
        
        # Install lintr package
        Rscript -e "install.packages('lintr', repos='https://cloud.r-project.org')"
        
        # Run R linting
        echo "Running R code linting..." >> review.md
        Rscript -e "
          library(lintr)
          lints <- lint_dir('RCode')
          if (length(lints) > 0) {
            cat('Found', length(lints), 'linting issues\n')
            print(lints)
          } else {
            cat('No linting issues found\n')
          }
        " >> review.md 2>&1 || echo "⚠️  Some linting issues detected" >> review.md
        
        echo "" >> review.md
        echo "✅ Code style checks completed" >> review.md
        echo "" >> review.md
    
    - name: Check Test Coverage
      continue-on-error: true
      run: |
        echo "### 🧪 Test Coverage" >> review.md
        echo "" >> review.md
        
        # Check if any test files were modified
        if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E "tests/.*\\.R$" > /dev/null; then
          echo "✅ Test files were updated" >> review.md
        else
          # Check if source code was modified
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E "(RCode|scripts)/.*\\.R$" > /dev/null; then
            echo "⚠️  Source code modified but no test updates detected" >> review.md
            echo "Consider adding or updating tests for the changes" >> review.md
          else
            echo "ℹ️  No source code changes requiring new tests" >> review.md
          fi
        fi
        
        echo "" >> review.md
        echo "✅ Test coverage analysis completed" >> review.md
        echo "" >> review.md
    
    - name: Security Scan
      continue-on-error: true
      run: |
        echo "### 🔒 Security Analysis" >> review.md
        echo "" >> review.md
        
        # Check for common security issues in R code
        echo "Checking for potential security issues..." >> review.md
        
        # Check for hardcoded credentials
        if grep -r -E "(api_key|password|secret|token)\s*=\s*['\"][^'\"]+['\"]" RCode/ scripts/ --include="*.R" 2>/dev/null | grep -v "Sys.getenv" | head -5; then
          echo "⚠️  Potential hardcoded credentials found (showing first 5)" >> review.md
        fi
        
        # Check for use of system() or shell() commands
        if grep -r -E "(system|shell)\\s*\\(" RCode/ scripts/ --include="*.R" 2>/dev/null | head -5; then
          echo "⚠️  System/shell commands detected - ensure proper input validation (showing first 5)" >> review.md
        fi
        
        # Check for SQL injection risks
        if grep -r -E "(paste|sprintf|paste0).*\\b(SELECT|INSERT|UPDATE|DELETE)\\b" RCode/ scripts/ --include="*.R" 2>/dev/null | head -5; then
          echo "⚠️  Potential SQL injection risk - use parameterized queries (showing first 5)" >> review.md
        fi
        
        echo "" >> review.md
        echo "✅ Security scan completed" >> review.md
        echo "" >> review.md
    
    - name: Documentation Check
      run: |
        echo "### 📚 Documentation" >> review.md
        echo "" >> review.md
        
        # Check if README or docs were updated
        if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E "(README|\.md$|docs/)" > /dev/null; then
          echo "✅ Documentation updated" >> review.md
        else
          echo "ℹ️  No documentation changes detected" >> review.md
        fi
        echo "" >> review.md
    
    - name: Post Review Comment
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let review = '## 🤖 Automated Code Review\n\n';
          
          try {
            review += fs.readFileSync('review.md', 'utf8');
          } catch (e) {
            review += 'Review completed but no detailed results available.';
          }
          
          review += '\n---\n*This is an automated review. Please ensure all checks pass before merging.*';
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: review
          });
    
    - name: Add Labels
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const labels = ['needs-review'];
          
          github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: labels
          });